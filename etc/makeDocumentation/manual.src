/**
\mainpage terminalServer EPICS Support Module
\section intro_sec Introduction
The terminalServer module contains templates that allow Avocent and Moxa
terminal servers to be managed through their SNMP interfaces.

\section bugs_sec Known Bugs
No known bugs yet.

\section user_sec User Manual
To use the module in an IOC, all that is needed is to instantiate some of the supplied templates.
There is nothing required in the start up script and the only libraries required are those from
modules this module depends on.

1. Instantiate one of TerminalServer16.template or TerminalServer32.template depending on
how many channels your terminal server has.  Parameters are
- P: EPICS prefix
- R: EPICS suffix
- name: Builder name

2. Instantiate one of Acs.template or Moxa.template depending on whether you want support
for an Avocent or Moxa terminal server respectively.  Parameters are
- P: EPICS prefix
- R: EPICS suffix
- HOST: SNMP host IP address (eg 172.23.115.82)

3. Instantiate either AcsChannel.template or MoxaChannel.template once for each channel
the terminal server supports.  Parameters are
- P: EPICS prefix
- R: EPICS suffix
- CHAN: Channel number
- HOST: SNMP host IP address (eg 172.23.115.82)

There is an etc/builder.py file that informs builder how to do this.  Just create
either a Moxa or an Acs object and builder does the rest.

To display in edm, choose the sixteenChannel.edl or thirtyTwoChannel.edl panel that suits the
size of your terminal server.  This will show a panel containing a summary of the current state
of the terminal server.  Be patient, to reduce traffic, the poll rate is quite slow (a poll every 10s)
and not everything is queried on every poll.  Each poll reads all the statistics data but only one
channel's configuration.

In addition, there is a config edit button and a green/red light for each channel.  A green light
indicates that the terminal server's configuration matches the configuration that EPICS is expecting.
A red light indicates it does not.  The edit button brings up a panel showing the state of a channel.

The channel panel allows the desired configuration to be set.  This is not immediately written to
the terminal server as writing is a length operation involving non-volatile memory and system restarts.
Instead, there is a button that allows the copying of the desired configuration into the terminal server.
There is also a button that fills the desired configuration from the terminal server (there is also a
button on the main panel that does this for all channels).

The contents of the desired parameters are autosaved.  This means that they will initialise themselves
to the contents of the autosave file when an IOC is restarted.  However, as the contents of desired
are not automatically written to the terminal server, this will not cause the terminal server to be
disturbed.  If there is a difference between the terminal server configuration and the desired, the
red light will appear and user intervention will be required to resolve the issue.

The current state of the terminal server is archived.

\section build_sec Build Instructions 
- \subpage build_instructions_example

IOCs build using these build instructions are available in iocs/

**/

